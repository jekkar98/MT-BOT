import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
APPLY, FEEDBACK = range(2)

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
OWNER_IDS = os.environ.get("OWNER_IDS", "")

if not BOT_TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit("Error: BOT_TOKEN not set")

# –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É OWNER_IDS –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö ID –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
owners = []
if OWNER_IDS:
    owners = [int(x) for x in OWNER_IDS.split(",") if x.strip().isdigit()]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        ["üì© –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, one_time_keyboard=True, resize_keyboard=True
    )
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ –æ—Ç–∑—ã–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
    )

async def apply_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª: –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏."""
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:")
    return APPLY

async def feedback_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ¬´–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª: –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞."""
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞:")
    return FEEDBACK

async def receive_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º."""
    user = update.message.from_user
    text = update.message.text
    message = f"üì© *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n–û—Ç: {user.full_name} (id={user.id})\n\n{text}"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É
    for owner_id in owners:
        try:
            await context.bot.send_message(chat_id=owner_id, text=message, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def receive_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º."""
    user = update.message.from_user
    text = update.message.text
    message = f"‚≠ê *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤*\n–û—Ç: {user.full_name} (id={user.id})\n\n{text}"
    for owner_id in owners:
        try:
            await context.bot.send_message(chat_id=owner_id, text=message, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥."""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))

    # ConversationHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –∏ –æ—Ç–∑—ã–≤–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r"^üì© –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$"), apply_request),
            MessageHandler(filters.Regex(r"^‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤$"), feedback_request)
        ],
        states={
            APPLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_application)],
            FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_feedback)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(conv_handler)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: webhook (–Ω–∞ Render) –∏–ª–∏ polling (–ª–æ–∫–∞–ª—å–Ω–æ)
    PORT = int(os.environ.get("PORT", 5000))
    render_hostname = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
    if render_hostname:
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook –¥–ª—è Render
        webhook_url = f"https://{render_hostname}/{BOT_TOKEN}"
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=webhook_url
        )
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å Long Polling
        application.run_polling()

if __name__ == "__main__":
    main()
